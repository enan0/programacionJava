package ar.com.osde.wmq.configuration;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.Field;
import java.util.Properties;

import org.apache.log4j.Logger;

public class WMQPropertiesReader {
	private static Logger logger = Logger.getLogger(WMQPropertiesReader.class);
	private final static String JBOSS_CONF_FOLDER = "jboss.server.config.url";
	private final static String PROPERTIES_FILE = "message-producer-wmq.properties";
	private final static String OSDE_FRAMEWORK_PROPERTIES_FILE = "osde-framework.properties";
	private final static String FRAMEWORK_PROPERTIES_FILE = "framework.properties";
	private static Properties wmqProperties = null;
	
	private final static String PREFIX = "messages.producer.wmq.";
	private final static String ENVIRONMENT = System.getProperty("environment");
	public final static String QUEUE_MANAGER = "queue.manager";
	public final static String QUEUE_NAME = "queue.name";
	public final static String QUEUE_CHANNEL = "queue.channel";
	public final static String QUEUE_HOSTNAME = "queue.hostName";
	public final static String QUEUE_PORT = "queue.port";
	public final static String QUEUE_PRIORITY = "queue.priority";
	public final static String THP_KEEP_ALIVE_TIME = "threadPool.keepAliveTime";
	public final static String THP_CORE_POOL_SIZE = "threadPool.corePoolSize";
	public final static String THP_MAXIMUM_POOL_SIZE = "threadPool.maximumPoolSize";
	public final static String THP_POOL_QUEUE_CAPACITY = "threadPool.queueCapacity";
	
	static {
		//Se realiza la carga de las propiedades a través de un método de inicialización estático,
		//para evitar el excesivo acceso a disco.
		try{
			wmqProperties = getParametrizedProperties();
			logger.info("Propiedades WMQ cargadas desde archivo: " + FRAMEWORK_PROPERTIES_FILE);			
		} catch ( IllegalAccessException e ) {
			logger.error("Error al cargar las propiedades para WMQ" + e);
		}
	}
	
	public String getProperty(String property) {
		String propertyValue = null;
		propertyValue = getProperties().getProperty( property );
		logger.info("Propiedad WMQ :: " + property);

		return propertyValue;
	}
	
	public Properties getProperties() {
		return wmqProperties;
	}
	
	private static String getPropertiesFilePath() {
		String jbossConfPath = System.getProperty(JBOSS_CONF_FOLDER);
		if ( jbossConfPath.startsWith("file:") ){
			jbossConfPath = jbossConfPath.substring(6);
		}
		
		StringBuilder wmqPropertiesPath = new StringBuilder( jbossConfPath );
		wmqPropertiesPath.append(PROPERTIES_FILE);
		
		return wmqPropertiesPath.toString();
	}
	
	private static Properties getPropertiesFromFile(String filePath) {
		Properties wmqProperties = null;
		try {
			FileInputStream file;
			file = new FileInputStream( filePath );
			wmqProperties = new Properties();
			wmqProperties.load(file);
			file.close();
		} catch (IOException e){
			logger.error("Error al abrir el archivo de configuraciones para WMQ: "+filePath, e);
		}
		
		return wmqProperties;
	}
	
	private static Properties getPropertiesFromOsdeFrameworkFile() {
		Properties wmqProperties = null;
		try {
			InputStream osdeFrameworkPropertiesFile = Thread.currentThread()
					.getContextClassLoader().getResourceAsStream(OSDE_FRAMEWORK_PROPERTIES_FILE);
			wmqProperties = new Properties();
			wmqProperties.load(osdeFrameworkPropertiesFile);
			osdeFrameworkPropertiesFile.close();
		} catch (IOException e) {
			logger.error("Error al abrir el archivo 'osde-framework.properties' para WMQ", e);
		}
		return wmqProperties;
	}
	
	private static Properties getPropertiesFromFrameworkFile() {
		Properties wmqProperties = null;
		try {
			InputStream osdeFrameworkPropertiesFile = Thread.currentThread()
					.getContextClassLoader().getResourceAsStream(FRAMEWORK_PROPERTIES_FILE);
			wmqProperties = new Properties();
			wmqProperties.load(osdeFrameworkPropertiesFile);
			osdeFrameworkPropertiesFile.close();
		} catch (IOException e) {
			logger.error("Error al abrir el archivo 'framework.properties' para WMQ", e);
		}
		return wmqProperties;
	}
	
	private static Properties getParametrizedProperties() throws IllegalArgumentException, IllegalAccessException {
		Properties frameworkProperties = getPropertiesFromOsdeFrameworkFile();
		Properties wmqParametrizedProperties = new Properties();

		Field publicFields[] = WMQPropertiesReader.class.getFields();
		for( Field publicField : publicFields ) {
			String value;
			String key = (String) publicField.get(null);
			String searchingProperty =  PREFIX + key + "." + ENVIRONMENT;
			if( frameworkProperties.containsKey(searchingProperty) ) {
				value = frameworkProperties.getProperty( searchingProperty );
			} else {
				String defaultProperty = PREFIX + key;
				value = frameworkProperties.getProperty( defaultProperty );
			}
			if(value != null)
				wmqParametrizedProperties.put( key, value );
		}
		return wmqParametrizedProperties;
	}
}






